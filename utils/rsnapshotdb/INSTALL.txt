rsnapshotDB has a few necessary requirements pre-install, as follows

Pre-install Requirements:

1) Perl v. 5.8.7+

2) SSH with ssh-keygen

3) Unix commands: scp, rm, gzip, mysqldump/pg_dump, nice

These need to be inplace on both the remote and/or local server. If using XML conf, then definitely on both servers for scp, rm, gzip, and 'nice'.

The "dumper" programs can be only on the remote server since rsnapshotDB version: 1.2.

5) ssh-keygen public key on remote server

Ideally, you would automate easily by having public/private ssh keys on your servers. See ~/.ssh and 'man ssh-keygen'.

6) local access to database server

This would also negate the need of storing vital (ie - "password") info in the XML config file.

Note: This hasn't been thoroughly tested yet!
Please report any bugs to
mailto:rsnapshot-discuss-request@lists.sf.net?subject=subscribe
http://www.rsnapshot.org

7) Copy rsnapshotDB.conf.sample to /etc/rsnapshotDB.conf

BASIC INSTALL:

Place the rsnapshotDB.conf and rsnapshotDB.xsd in a safe location (typicall /etc/) then type $ chmod 600 rsnapshotDB.*

Copy rsnapshotDB.pl into a good location, something like:
/usr/local/bin/rsnapshotDB.pl

Then call it from the rsnapshot.conf file as:

backup_script	/usr/local/bin/rsnapshotDB.pl     database/


SECURITY:

The best option is to use ssh keys and network-authenticated database users.
ie (only connect from localhost or 192.168.x.x -> db server without password).
This avoids having to store your db passwords in /etc/rsnapshotDB.conf

NOTE:
If you have not logged in via ssh and keys before, you will have to do so manually as the rsnapshot user (typically root). This is necessary in order to accept the host as an authorized host. Once you say "yes" to accepting the key/host, you should be able to login automatically.
